#------------------------------------------------------------------------------
# Configuration file for the benchmarker.pl script from the TIFA library.
#------------------------------------------------------------------------------
# Type "benchmarker.pl --help" for more information on the benchmarker.pl
# script. Type "man Tifa::SimpleConfigReader" for more information on the
# configuration file format used.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Name(s) of the (factoring) program(s) to bench.
#
# Syntax: exe = <path_to_program_name>
#     or: exe = list(<path_to_program_1>, <path_to_program_2>, ... )
#
# The standard program names must be used, i.e. values must be of the form:
#     <path_to_exe>/<std_program_name>
# with <std_program_name> being one of the following:
#     cfrac
#     fermat
#     qs
#     siqs
#     squfof
#------------------------------------------------------------------------------
exe = list(./squfof, ./cfrac)

#------------------------------------------------------------------------------
# Mode(s) of program(s) to bench.
#
# CFRAC / QS / SIQS ONLY:
#     Set mode to use_defaults to set the program mode to "use_defaults" i.e.
#     let the program choose the "best" parameters. If mode is set to
#     no_defaults then the parameters given in this file are used.
#
# Syntax: mode = <mode>
#     or: mode = list(<mode_1>, <mode_2>, ...)
#------------------------------------------------------------------------------
mode = no_defaults

#------------------------------------------------------------------------------
# Length (in bits) of the number n to factor.
#
# Used only if no argument file is provided on the command line via the
# --args option.
#
# Syntax: bit_length_of_n = list(<val1>, <val2>, <val3> etc.)
#     or: bit_length_of_n = range(from <from> to <to> increment <step>)
#
#------------------------------------------------------------------------------
bit_length_of_n = range(from 60 to 100 increment 1)

#------------------------------------------------------------------------------
# Number of prime factors in the decomposition of n
#
# Used only if no argument file is provided on the command line via the
# --args option.
#
# Syntax: nprime_factors_in_n = <number>
#     or: nprime_factors_in_n = list(<val1>, <val2>, <val3> etc.)
#     or: nprime_factors_in_n = range(from <from> to <to> increment <step>)
#
# Of course, all values given should be different from 1
#------------------------------------------------------------------------------
nprime_factors_in_n = list(2)

#------------------------------------------------------------------------------
# Number of primes used in trial division of the number to factor.
#
# Syntax: nprimes_tdiv = <number>
#     or: nprimes_tdiv = list(<val1>, <val2>, <val3> etc.)
#     or: nprimes_tdiv = range(from <from> to <to> increment <step>)
#------------------------------------------------------------------------------
nprimes_tdiv = list(1)

#------------------------------------------------------------------------------
# Impose a condition on the set of parameters. A run will be performed only if
# this expression evaluates to non zero.
#
# Syntax: filter = <expression>
#
# In addition to parameters relevant to the program to benchmark, the following
# parameters can be used in the expression: exe, algo, mode. Expressions should
# follow Perl's syntax.
#
# Example: filter = (nprimes_in_factor_base == nprimes_tdiv_smooth_res)
#------------------------------------------------------------------------------
filter = if ((algo eq 'squfof') || (algo eq 'fermat') || (algo eq 'ecm')) { \
             # No special requirement for SQUFOF, Fermat or ECM             \
             1;                                                             \
         } else {                                                           \
             if (!(mode eq 'use_defaults')) {                               \
                 (nprimes_in_factor_base == nprimes_tdiv_smooth_res);       \
             } else {                                                       \
                 1;                                                         \
             }                                                              \
         }

#------------------------------------------------------------------------------
# Parameters for the ECM only.
# (Only used if mode is set to 'no_defaults')
#------------------------------------------------------------------------------
#
# ECM ONLY: Bound to use in the first phase of the algorithm.
#
# Syntax: b1 = <number>
#
b1 = 1000

#
# ECM ONLY: Bound to use in the second phase of the algorithm.
#
# Syntax: b2 = <number>
#
b2 = 50000

#
# ECM ONLY: Number of curves to try before giving up.
#
# Syntax: ncurves = <number>
#
ncurves = 20

#------------------------------------------------------------------------------
# Parameters for the CFRAC/QS/SIQS algorithms
#------------------------------------------------------------------------------
#
# Number of primes in factor base
#
# Syntax: nprimes_in_factor_base = <number>
#     or: nprimes_in_factor_base = list(<val1>, <val2>, <val3> etc.)
#     or: nprimes_in_factor_base = range(from <from> to <to> increment <step>
#
nprimes_in_factor_base = list(256, 512, 1024, 2048)

#
# SIQS ONLY: Half width of the sieving interval.
#
# Syntax: sieve_half_width = <number>
#     or: sieve_half_width = list(<val1>, <val2>, <val3> etc.)
#     or: sieve_half_width = range(from <from> to <to> increment <step>
#
sieve_half_width = range(from 50000 to 150000 increment 25000)

#
# Number of primes to trial divide by the smooth residues
#
# Syntax: nprimes_tdiv_smooth_res = <number>
#     or: nprimes_tdiv_smooth_res = list(<val1>, <val2>, <val3> etc.)
#     or: nprimes_tdiv_smooth_res = range(from <from> to <to> increment <step>)
#
nprimes_tdiv_smooth_res = list(256, 512, 1024, 2048)

#
# CFRAC ONLY: Method to use for smooth batch detection.
#
# Syntax: filter_method = <number>
#     or: filter_method = list(<val1>, <val2>, <val3> etc.)
#
# with: 0 for trial division
#       1 for trial division + early abort
#       2 for DJB's batch method
#
filter_method = 2

#
# CFRAC ONLY: Number of steps in early abort strategy for residues
# factorization. No early abort is performed if nsteps_early_abort = 0 or
# if filter_method is different from 1.
#
# Syntax: nsteps_early_abort = <number>
#     or: nsteps_early_abort = list(<val1>, <val2>, <val3> etc.)
#     or: nsteps_early_abort = range(from <from> to <to> increment <step>)
#
nsteps_early_abort = 0

#
# Maximal number of relations wanted
#
# Syntax: nrelation = <number>
#
nrelations = 32

#
# Method used for the linear system resolution
#
# Syntax: linalg_method = <number>
#     or: linalg_method = list(<val1>, <val2>, <val3> etc.)
#
# Note: There is currently only one method supported (lsr_method = 0)
#
linalg_method = 0

#
# Are we using the large prime variation?
#
# Syntax: use_large_primes = 0
#     or: use_large_primes = 1
#
use_large_primes = 1
