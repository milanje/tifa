# Copyright (C) 2011 CNRS - Ecole Polytechnique - INRIA.
# 
# This file is part of TIFA.
#
# TIFA is free software; you can redistribute it and/or modify it under the 
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# TIFA is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA.

#------------------------------------------------------------------------------
# File    : tools/SConscript
# Author  : Jerome Milan
# Version : 2011-10-11
#
# This is the SCons input file used to build the programs of the TIFA library.
#------------------------------------------------------------------------------

#
# Imported Python modules
#
import os

#
# Imported variables
#
Import('env')
Import('lib_dir')
Import('top_dir')
Import('lib_build_dir')
Import('tifa_libname')
Import('tifa_distname')
Import('tools_dir')

#
# New environement
#
progenv = env.Clone()

#
# Current working directory
#
cur_wrk_dir  = tools_dir
#
# Source directory
#
tools_srcdir  = 'src'
#
# Programs' include directory
#
tools_incdir  = 'include'
#
# Programs' installation directory
#
install_tools_dir  = progenv['BINDIR']
#
# Library's include directories
#
lib_algo_incdir  = os.path.join(lib_dir, 'algo', 'include')
lib_data_incdir  = os.path.join(lib_dir, 'data', 'include')
lib_utils_incdir = os.path.join(lib_dir, 'utils', 'include')
#
# Perl scripts directory
#
script_dir  = os.path.join(cur_wrk_dir, 'scripts')
#
# Perl scripts installation directory
#
install_script_dir  = progenv['SCRIPTDIR']
#
# Perl scripts
#
scripts = [
    os.path.join(script_dir, 'factorize.pl'),
    os.path.join(script_dir, 'benchmarker.pl'),
    os.path.join(script_dir, 'plotmaker.pl'),
    os.path.join(script_dir, 'mergeres.pl'),
    os.path.join(script_dir, 'extractres.pl'),
    os.path.join(script_dir, 'gencomposites.pl')
]
#
# Perl scripts configuration files installation directory
#
install_conf_files = progenv['CONFDIR']
#
# Perl scripts configuration files
#
conf_files = [
    os.path.join(script_dir, 'factorize.conf'),
    os.path.join(script_dir, 'benchmarker.conf'),
    os.path.join(script_dir, 'plotmaker.conf')
]
#
# Perl modules directory
#
pm_dir  = os.path.join(script_dir, 'Tifa')
#
# Perl modules installation directory
#
install_pm_dir  = os.path.join(progenv['PERLMODDIR'], 'Tifa')
#
# Perl modules
#
modules = [
    os.path.join(pm_dir, 'Bencher.pm'),
    os.path.join(pm_dir, 'DataDescriptor.pm'),
    os.path.join(pm_dir, 'FormatConverter.pm'),
    os.path.join(pm_dir, 'GnuPlotter.pm'),
    os.path.join(pm_dir, 'NumberGenerator.pm'),
    os.path.join(pm_dir, 'Program.pm'),
    os.path.join(pm_dir, 'ProgramRepository.pm'),
    os.path.join(pm_dir, 'Rotor.pm'),
    os.path.join(pm_dir, 'SimpleConfigReader.pm')
]
modules.sort()

#
# Perl package name
#
perl_package = 'Tifa'
#
# Perl modules' man pages directory
#
pm_man_dir  = os.path.join(script_dir, perl_package)
#
# Perl modules' man pages installation directory
#
install_pm_man_dir  = os.path.join(progenv['MANDIR'], 'man3')
#
# Perl modules man pages
#
man_pages = [
    os.path.join(pm_man_dir, perl_package + '::Bencher.3pm'),
    os.path.join(pm_man_dir, perl_package + '::DataDescriptor.3pm'),
    os.path.join(pm_man_dir, perl_package + '::FormatConverter.3pm'),
    os.path.join(pm_man_dir, perl_package + '::GnuPlotter.3pm'),
    os.path.join(pm_man_dir, perl_package + '::NumberGenerator.3pm'),
    os.path.join(pm_man_dir, perl_package + '::Program.3pm'),
    os.path.join(pm_man_dir, perl_package + '::ProgramRepository.3pm'),
    os.path.join(pm_man_dir, perl_package + '::Rotor.3pm'),
    os.path.join(pm_man_dir, perl_package + '::SimpleConfigReader.3pm')
]
man_pages.sort()

#
# Custom builder to automatically generate man pages
#
def man_generator(source, target, env, for_signature):
    title   = '"TIFA Documentation"'
    release = '"' + progenv['TIFA_STRING'] + '"'

    cmd  = 'pod2man -c %s -r %s' % (title, release)
    cmd += ' -n ' + os.path.basename(str(target[0])).replace('.3pm', '');
    cmd += ' %s %s' % (source[0], target[0])

    return cmd

man_bld = Builder(
              generator  =  man_generator,
              suffix     = '.3pm',
              src_suffix = '.pm'
          )

progenv['BUILDERS']['pod2man'] = man_bld

#
# Preprocessor flags
#
progenv.Append(
    CPPPATH = [
        top_dir,
        os.path.join(lib_dir,   lib_algo_incdir),
        os.path.join(lib_dir,   lib_data_incdir),
        os.path.join(lib_dir,   lib_utils_incdir),
        os.path.join(tools_dir, tools_incdir)
    ]
)

#
# If the GMP library is installed in some non-standard location
#
if (progenv['GMP_INCDIR'] != ""):
    progenv.Append(CPPPATH = [progenv['GMP_INCDIR']])

#
# Compiler options
#
progenv.Append(CCFLAGS = ' -std=c99')

#
# Libraries to link to
#
libs_to_link = [tifa_libname, 'gmp', 'm']

#
# Library path
#
lib_path = [lib_build_dir]
#
# If the GMP library is installed in some non-standard location
#
if (progenv['GMP_LIBDIR'] != ""):
    lib_path.append(progenv['GMP_LIBDIR'])

#
# Sources common to the TIFA programs
#
common_src = [
    os.path.join(tools_srcdir, 'tool_utils.c'),
    os.path.join(tools_srcdir, 'factoring_program.c'),
    os.path.join(tools_srcdir, 'common_funcs.c'),
]

#
# Use the common sources as objects to bypass SCons's warnings
#
common_obj = progenv.Object(common_src);

#
# CFRAC program's files
#
cfrac_src  = [os.path.join(tools_srcdir, 'cfrac_program.c')] + common_obj
cfrac_dist = [os.path.join(tools_srcdir, 'cfrac_program.c')]

#
# ECM program's files
#
ecm_src  = [os.path.join(tools_srcdir, 'ecm_program.c')] + common_obj
ecm_dist = [os.path.join(tools_srcdir, 'ecm_program.c')]

#
# Fermat's factorization program's files
#
fermat_src  = [os.path.join(tools_srcdir, 'fermat_program.c')] + common_obj
fermat_dist = [os.path.join(tools_srcdir, 'fermat_program.c')]

#
# SIQS program's files
#
siqs_src  = [os.path.join(tools_srcdir, 'siqs_program.c')] + common_obj
siqs_dist = [os.path.join(tools_srcdir, 'siqs_program.c')]

#
# SQUFOF program's files
#
squfof_src  = [os.path.join(tools_srcdir, 'squfof_program.c')] + common_obj
squfof_dist = [os.path.join(tools_srcdir, 'squfof_program.c')]

#
# Pollard's rho program's files
#
rho_src  = [os.path.join(tools_srcdir, 'rho_program.c')] + common_obj
rho_dist = [os.path.join(tools_srcdir, 'rho_program.c')]

#
# Trial Division program's files
#
tdiv_src  = [os.path.join(tools_srcdir, 'tdiv_program.c')] + common_obj
tdiv_dist = [os.path.join(tools_srcdir, 'tdiv_program.c')]

#------------------------------------------------------------------------------
# Build the CFRAC program
#------------------------------------------------------------------------------
cfrac = progenv.Program(
            'cfrac',
            LIBS = libs_to_link,
            LIBPATH = lib_path,
            source = cfrac_src
        )
#------------------------------------------------------------------------------
# Build the CFRAC program
#------------------------------------------------------------------------------
ecm = progenv.Program(
          'ecm',
          LIBS = libs_to_link,
          LIBPATH = lib_path,
          source = ecm_src
      )

#------------------------------------------------------------------------------
# Build Fermat's factorization program
#------------------------------------------------------------------------------
fermat = progenv.Program(
            'fermat',
            LIBS = libs_to_link,
            LIBPATH = lib_path,
            source = fermat_src
         )

#------------------------------------------------------------------------------
# Build the SIQS program
#------------------------------------------------------------------------------
siqs = progenv.Program(
           'siqs',
           LIBS = libs_to_link,
           LIBPATH = lib_path,
           source = siqs_src
       )

#------------------------------------------------------------------------------
# Build the SQUFOF program
#------------------------------------------------------------------------------
squfof = progenv.Program(
             'squfof',
             LIBS = libs_to_link,
             LIBPATH = lib_path,
             source = squfof_src
         )

#------------------------------------------------------------------------------
# Build the Pollard's rho program
#------------------------------------------------------------------------------
rho = progenv.Program(
          'rho',
          LIBS = libs_to_link,
          LIBPATH = lib_path,
          source = rho_src
      )

#------------------------------------------------------------------------------
# Build the trial division program
#------------------------------------------------------------------------------
tdiv = progenv.Program(
            'tdiv',
            LIBS = libs_to_link,
            LIBPATH = lib_path,
            source = tdiv_src
        )

#------------------------------------------------------------------------------
# Build the perl modules' man pages using a custom builder
#------------------------------------------------------------------------------
for i in range(len(modules)):
    progenv.pod2man(man_pages[i], modules[i])

#------------------------------------------------------------------------------
# Install programs target
#------------------------------------------------------------------------------
progenv.Install(install_tools_dir, [cfrac, ecm, fermat, siqs, squfof, rho, tdiv])
progenv.Alias('install', install_tools_dir)
progenv.Alias('install-bin', install_tools_dir)

#------------------------------------------------------------------------------
# Install scripts target
#------------------------------------------------------------------------------
progenv.Install(install_script_dir, scripts)
progenv.Alias('install', install_script_dir)
progenv.Alias('install-script', install_script_dir)

#------------------------------------------------------------------------------
# Install scripts' configuration files target
#------------------------------------------------------------------------------
progenv.Install(install_conf_files, conf_files)
progenv.Alias('install', install_conf_files)
progenv.Alias('install-conf', install_conf_files)

#------------------------------------------------------------------------------
# Install Perl modules target
#------------------------------------------------------------------------------
progenv.Install(install_pm_dir, modules)
progenv.Alias('install', install_pm_dir)
progenv.Alias('install-perlmod', install_pm_dir)

#------------------------------------------------------------------------------
# Install Perl modules' man pages target
#------------------------------------------------------------------------------
progenv.Install(install_pm_man_dir, man_pages)
progenv.Alias('install', install_pm_man_dir)
progenv.Alias('install-man', install_pm_man_dir)

#------------------------------------------------------------------------------
# Files to be distributed in the TIFA tar package
#------------------------------------------------------------------------------
if "dist" in COMMAND_LINE_TARGETS:
    archive = env.Tar(tifa_distname, tdiv_dist)
    env.Tar(tifa_distname, cfrac_dist)
    env.Tar(tifa_distname, ecm_dist)
    env.Tar(tifa_distname, fermat_dist)
    env.Tar(tifa_distname, siqs_dist)
    env.Tar(tifa_distname, squfof_dist)
    env.Tar(tifa_distname, rho_dist)
    env.Tar(tifa_distname, tdiv_dist)
    env.Tar(tifa_distname, common_src)
    env.Tar(tifa_distname, os.path.join(tools_dir, tools_incdir))
    env.Tar(tifa_distname, modules)
    env.Tar(tifa_distname, conf_files)
    env.Tar(tifa_distname, scripts)
    env.Tar(tifa_distname, 'SConscript')
    env.Alias('dist', archive)

