#!/usr/bin/perl -w

# Copyright (C) 2011 CNRS - Ecole Polytechnique - INRIA.
# 
# This file is part of TIFA.
#
# TIFA is free software; you can redistribute it and/or modify it under the 
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# TIFA is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA.

use strict;
use Getopt::Long;
use File::Basename;

#------------------------------------------------------------------------------
#           Outputs a list of (prime) numbers as C header and source files
#------------------------------------------------------------------------------
# File    : genprimes.pl
# Author  : Jerome Milan
# Version : 2011-10-11
#------------------------------------------------------------------------------

my $NMAX_PRIMES = 1 << 22;
#
# Options' declarations and default values, if any...
#
my $output_prefix = "";
my $nfirst_primes = 8192;
my $help          = "";
#
# Get the list of options...
#
GetOptions(
    "out=s"     => \$output_prefix,
    "nprimes=i" => \$nfirst_primes,
    "help"      => \$help
);
#
# ... and process them...
#
if ($help) {
    print_help();
}
if (!$output_prefix) {
    print("Error: no output prefix provided!\n");
    print_usage(1);
    die();
}
if ($nfirst_primes > $NMAX_PRIMES) {
    print("Error: number of primes limited to $NMAX_PRIMES\n");
    die();
}
#
# Output filenames based on the given prefix...
#
my $output_inc = $output_prefix.".h";
my $output_src = $output_prefix.".c";
#
# Don't automatically overwrite the files if they exist...
#
if (-e $output_inc) {
    print("Error: output file $output_inc already exists!\n");
    &print_usage;
    die();
}
if (-e $output_src) {
    print("Error: output file $output_src already exists!\n");
    &print_usage;
    die();
}
print("Generating $nfirst_primes prime numbers...\n");
print("Writing output in $output_inc and $output_src... ");

#
# Everything's ok. Compute the $nfirst_primes smallest primes...
#
my @first_primes = (2);
my $prime   = 3;
my $nprimes = 1;
while ($nprimes <= $nfirst_primes) {
    my $sr = int(sqrt($prime));
    for (my $i = 0; $i < $nfirst_primes; $i++) {
        last if ($prime % $first_primes[$i] == 0);
        if ($first_primes[$i] > $sr) {
            $first_primes[$nprimes] = $prime;
            $nprimes++;
            last;
        }
    }
    $prime += 2;
}

#
# Generates the files...
#
my $name_prog = basename($0);
my $name_src  = basename($output_src);
my $name_inc  = basename($output_inc);
my $date      = localtime();
my $long_license = "// INCLUDE_LICENSE";

#
# First, the source file...
#
open(OF, "> $output_src") or die("Error: cannot open file $output_src\n");
print OF << "EOF";
$long_license

/**
 * \\file    $name_src
 * \\author  Automatically generated by $name_prog
 * \\date    $date
 * \\version 1.0
 */

#include "$name_inc"

const uint32_t first_primes[NFIRST_PRIMES] MAYBE_UNUSED = {
EOF

for (my $i = 0; $i < $nfirst_primes - 1; $i++) {
    print OF "\t$first_primes[$i],\n";
}
print OF "\t$first_primes[$nfirst_primes - 1]\n";
print(OF "};\n\n");
print OF << "EOF";
const uint32_t LARGEST_PRIME MAYBE_UNUSED = $first_primes[$nfirst_primes - 1];

//
// _NOTE_: first_primes_array is merely an uint32_array_t wrapper for
//         first_primes, and as such, it has no real "alloced" memory.
//         Setting first_primes_array.alloced to 0 will prevent errors
//         if free_uint32_array is called on first_primes_array.
//
const uint32_array_t first_primes_array MAYBE_UNUSED = {
    .alloced = 0,
    .length  = NFIRST_PRIMES,
    .data    = (uint32_t*)first_primes
};

EOF

close(OF);

#
# ... and then, generates the header file...
#
my $base_prefix  = basename($output_prefix);
my $include_symb = "_TIFA_";
$include_symb .= "\U$base_prefix";  # to upper-case
$include_symb .= "_H_";
$include_symb  =~ s/\W/_/;          # replace non word characters by "_"

open(OF, "> $output_inc") or die("Error: cannot open file $output_inc\n");
print OF << "EOF";
$long_license

/**
 * \\file    $name_inc
 * \\author  Automatically generated by $name_prog
 * \\date    $date
 * \\version 1.0
 *
 * \\brief Precomputed small primes.
 *
 * This is a list of the precomputed small primes together with
 * a \\c uint32_array_t wrapper.
 */

#if !defined($include_symb)
   /**
    * \\def $include_symb
    * Standard include guard.
    */
#define $include_symb

#include <inttypes.h>

#include "array.h"
#include "tifa_config.h"

/**
 * \\def NFIRST_PRIMES
 * Number of precomputed primes in the \\c first_primes array.
 */
#define NFIRST_PRIMES $nfirst_primes

/**
 * The \\c first_primes array is a global array of \\c uint32_t elements
 * containing the first \\c NFIRST_PRIMES prime numbers (from 2 and beyond).
 */
extern const uint32_t first_primes[NFIRST_PRIMES] MAYBE_UNUSED;

/**
 * The largest prime in the \\c first_primes array.
 */
extern const uint32_t LARGEST_PRIME MAYBE_UNUSED;

/**
 * \\c first_primes_array is a \\c uint32_array_t wrapper to the array
 * \\c first_primes.
 *
 * \\note \\c first_primes_array 's \\c alloced field is set to zero. Indeed,
 * \\c first_primes_array is merely a \\c uint32_array_t wrapper for
 * \\c first_primes, and as such, it has no real "alloced" memory. Setting
 * \\c first_primes_array.alloced to 0 will prevent errors
 * if \\c free_mpz_array is inadvertently called on \\c first_primes_array.
 */
extern const uint32_array_t first_primes_array MAYBE_UNUSED;

#endif

EOF
close(OF);

printf("done!\n");

#------------------------------------------------------------------------------
# Functions
#------------------------------------------------------------------------------
sub print_usage {
    my $name = basename($0);
    printf "Usage:\n";
    printf "------\n\n";
    printf "%15s [--nprimes <number_of_primes>] [--help]\n", $name;
    printf "%15s --out <output_prefix>\n\n", '';
}
#------------------------------------------------------------------------------
sub print_usage_and_exit {
    print_usage();
    exit;
}
#------------------------------------------------------------------------------
sub print_help {
    my $name = basename($0);

    my $title = "$name - Outputs list of primes as C header and source files";
    my $line  = '-' x length($title);
    print << "EOF";

$title
$line

EOF

    print_usage();

    print << "EOF";
This script is part of the TIFA (Tools for Integer FActorization) library.
It generates a list of prime numbers and declares them as a uint32_t array
in a C header and source file.

General parameters/options:
---------------------------

    --out = s
        Output file prefix. The header file and the C source file names
        are given by appending respectively ".h" and ".c".

    --nprimes = i
        Number of primes to generate.
        Default value: $nfirst_primes

    --help
        Prints this help message.

EOF
  exit();
}
#------------------------------------------------------------------------------
