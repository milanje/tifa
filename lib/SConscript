# Copyright (C) 2011 CNRS - Ecole Polytechnique - INRIA.
#
# This file is part of TIFA.
#
# TIFA is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# TIFA is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA.

#------------------------------------------------------------------------------
#              SCons input file used to build the TIFA library
#------------------------------------------------------------------------------
# File    : lib/SConscript
# Author  : Jerome Milan
# Version : 2020-04-15
#------------------------------------------------------------------------------

#
# Imported standard python modules
#
import os
import sys

#
# Imported variables
#
Import('env')
Import('top_dir')
Import('tifa_libname')
Import('tifa_distname')

#------------------------------------------------------------------------------
#                           Library compilation
#------------------------------------------------------------------------------

#
# Make a new environment to avoid polluting the imported environement
#
libenv = env.Clone()

#
# Current working directory
#
cur_wrk_dir  = os.getcwd()

#
# Source directories
#
algo_srcdir  = os.path.join('algo', 'src')
data_srcdir  = os.path.join('data', 'src')
utils_srcdir = os.path.join('utils', 'src')

#
# Include directories
#
algo_incdir  = os.path.join('algo', 'include')
data_incdir  = os.path.join('data', 'include')
utils_incdir = os.path.join('utils', 'include')

#
# Scripts
#
scripts  = os.path.join('data', 'scripts', 'genprimes.pl')

#
# Preprocessor flags
#
libenv.Append(
    CPPPATH = [
        top_dir,
        os.path.join(cur_wrk_dir, algo_incdir),
        os.path.join(cur_wrk_dir, data_incdir),
        os.path.join(cur_wrk_dir, utils_incdir)
    ]
)

#
# If the GMP library is installed in some non-standard location
#
if (libenv['GMP_INCDIR'] != ""):
    libenv.Append(CPPPATH = [libenv['GMP_INCDIR']])

#
# Compiler options
#
libenv.Append(CCFLAGS = ' -std=c99')

#
# TIFA source files
#
tifa_src     = [
    #
    # Algorithms
    #
    os.path.join( algo_srcdir,  'cfrac.c'),
    os.path.join( algo_srcdir,  'ecm.c'),
    os.path.join( algo_srcdir,  'fermat.c'),
    os.path.join( algo_srcdir,  'siqs.c'),
    os.path.join( algo_srcdir,  'squfof.c'),
    os.path.join( algo_srcdir,  'rho.c'),
    os.path.join( algo_srcdir,  'tdiv.c'),
    os.path.join( algo_srcdir,  'tifa_factor.c'),
    #
    # Data
    #
    os.path.join( data_srcdir,  'first_primes.c'),
    #
    # Structures, utilities, etc.
    #
    os.path.join( utils_srcdir, 'approx.c'),
    os.path.join( utils_srcdir, 'array.c'),
    os.path.join( utils_srcdir, 'bernsteinisms.c'),
    os.path.join( utils_srcdir, 'factoring_machine.c'),
    os.path.join( utils_srcdir, 'funcs.c'),
    os.path.join( utils_srcdir, 'gauss_elim.c'),
    os.path.join( utils_srcdir, 'gmp_utils.c'),
    os.path.join( utils_srcdir, 'hashtable.c'),
    os.path.join( utils_srcdir, 'lindep.c'),
    os.path.join( utils_srcdir, 'linked_list.c'),
    os.path.join( utils_srcdir, 'matrix.c'),
    os.path.join( utils_srcdir, 'res_tdiv.c'),
    os.path.join( utils_srcdir, 'siqs_poly.c'),
    os.path.join( utils_srcdir, 'siqs_sieve.c'),
    os.path.join( utils_srcdir, 'smooth_filter.c'),
    os.path.join( utils_srcdir, 'sqrt_cont_frac.c'),
    os.path.join( utils_srcdir, 'stopwatch.c'),
    os.path.join( utils_srcdir, 'x_array_list.c'),
    os.path.join( utils_srcdir, 'x_tree.c')
]

#
# TIFA header files
#
tifa_inc = [
    #
    # Configuration header file
    #
    os.path.join( top_dir,      'tifa_config.h'),
    #
    # Algorithms
    #
    os.path.join( algo_incdir,  'cfrac.h'),
    os.path.join( algo_incdir,  'ecm.h'),
    os.path.join( algo_incdir,  'fermat.h'),
    os.path.join( algo_incdir,  'siqs.h'),
    os.path.join( algo_incdir,  'squfof.h'),
    os.path.join( algo_incdir,  'rho.h'),
    os.path.join( algo_incdir,  'tdiv.h'),
    os.path.join( algo_incdir,  'tifa_factor.h'),
    #
    # Data
    #
    os.path.join( data_incdir,  'first_primes.h'),
    #
    # Structures, utilities, etc.
    #
    os.path.join( utils_incdir, 'approx.h'),
    os.path.join( utils_incdir, 'array.h'),
    os.path.join( utils_incdir, 'bernsteinisms.h'),
    os.path.join( utils_incdir, 'bitstring_t.h'),
    os.path.join( utils_incdir, 'buckets.h'),
    os.path.join( utils_incdir, 'exit_codes.h'),
    os.path.join( utils_incdir, 'factoring_machine.h'),
    os.path.join( utils_incdir, 'funcs.h'),
    os.path.join( utils_incdir, 'gauss_elim.h'),
    os.path.join( utils_incdir, 'gmp_utils.h'),
    os.path.join( utils_incdir, 'hashtable.h'),
    os.path.join( utils_incdir, 'lindep.h'),
    os.path.join( utils_incdir, 'linked_list.h'),
    os.path.join( utils_incdir, 'macros.h'),
    os.path.join( utils_incdir, 'matrix.h'),
    os.path.join( utils_incdir, 'messages.h'),
    os.path.join( utils_incdir, 'print_error.h'),
    os.path.join( utils_incdir, 'res_tdiv.h'),
    os.path.join( utils_incdir, 'siqs_poly.h'),
    os.path.join( utils_incdir, 'siqs_sieve.h'),
    os.path.join( utils_incdir, 'smooth_filter.h'),
    os.path.join( utils_incdir, 'sqrt_cont_frac.h'),
    os.path.join( utils_incdir, 'stopwatch.h'),
    os.path.join( utils_incdir, 'timer.h'),
    os.path.join( utils_incdir, 'x_array_list.h'),
    os.path.join( utils_incdir, 'x_tree.h')
]
#
# Distributed header files
#
tifa_inc_dist = tifa_inc[:]
tifa_inc_dist.remove(os.path.join(top_dir, 'tifa_config.h'))

#
# TIFA global header files
#
tifa_h           = "tifa.h"
tifa_internals_h = "tifa_internals.h"

#
# Documentation header file (never included nor compiled)
#
mainpage_h = 'mainpage.h'

#------------------------------------------------------------------------------
# Build the TIFA library
#------------------------------------------------------------------------------
libtifa = libenv.Library(tifa_libname, source = tifa_src)

#------------------------------------------------------------------------------
# Installation directives
#------------------------------------------------------------------------------
libenv.Install(libenv['LIBDIR'], libtifa)
libenv.Install(libenv['INCLUDEDIR'], tifa_inc)
libenv.Install(libenv['INCLUDEDIR'], tifa_h)
libenv.Install(libenv['INCLUDEDIR'], tifa_internals_h)
libenv.Alias('install', libenv['LIBDIR'])
libenv.Alias('install', libenv['INCLUDEDIR'])
libenv.Alias('install-lib', libenv['LIBDIR'])
libenv.Alias('install-lib', libenv['INCLUDEDIR'])

#------------------------------------------------------------------------------
# Doxygen custom style files
#------------------------------------------------------------------------------
doxy_custom_dir = os.path.join(top_dir, 'doxygen_files')

doxy_custom_files = [
    os.path.join(doxy_custom_dir,'doxygen.css'),
    os.path.join(doxy_custom_dir,'footer.html'),
    os.path.join(doxy_custom_dir,'header.html')
]

#------------------------------------------------------------------------------
# Files to be distributed in the TIFA tar package
#------------------------------------------------------------------------------
if "dist" in COMMAND_LINE_TARGETS:
    archive = env.Tar(tifa_distname, tifa_inc_dist)
    env.Tar(tifa_distname, tifa_src)
    env.Tar(tifa_distname, tifa_h)
    env.Tar(tifa_distname, tifa_internals_h)
    env.Tar(tifa_distname, mainpage_h)
    env.Tar(tifa_distname, scripts)
    env.Tar(tifa_distname, doxy_custom_files)
    env.Tar(tifa_distname, 'SConscript')
    env.Alias('dist', archive)

#------------------------------------------------------------------------------
#                           Documentation generation
#------------------------------------------------------------------------------
def make_doxygen_doc(target, source, env):
    #
    # Function for a custom documentation builder
    #
    import time

    doxy_file = os.path.join(libenv['BUILDDIR'], 'doc', 'doxygen.conf')
    #
    # Generate the documentation
    #
    doxy_cmd = "doxygen " + doxy_file
    ecode    = os.system(doxy_cmd)

    #
    # Generate the PDF file if needed since Doxygen doesn't do it automatically
    #
    if env['GENERATE_DOXYGEN_PDF'] == 'yes':
        latex_dir = os.path.join(env['BUILDDIR'], 'doc', 'latex')
        #
        # _FIX_ME_: The following system call is not portable
        #
        latex_cmd = "cd " + latex_dir + " && make"
        ecode     = os.system(latex_cmd)

    dsrc  = env['doc_dummy_src']
    dfile = open(dsrc, 'w')
    dfile.write('Documentation generated on '+time.asctime(time.localtime()) )
    dfile.close()
#------------------------------------------------------------------------------

#
# Custom builder to generate the doxygen documentation
#
doc_bld = Builder(
    action = make_doxygen_doc,
    suffix = '',
    src_suffix = ''
)

#
# Make a new environment
#
docenv = libenv.Clone(['default', 'textfile'])
docenv.Append(BUILDERS = {'MakeDoc' : doc_bld})

#
# Create the doxyfile by subtituting symbols in the doxyfile template
#
doc_dir = os.path.join(libenv['BUILDDIR'], 'doc')

subst_dict = {}
subst_dict['%PROJECT%']        = docenv['SHORTNAME']
subst_dict['%VERSION%']        = docenv['VERSION']
subst_dict['%DOCDIR%']         = doc_dir
subst_dict['%TOPSRCDIR%']      = top_dir
subst_dict['%PAPER_TYPE%']     = docenv['DOXYGEN_PAPER_TYPE']
subst_dict['%GENERATE_HTML%']  = docenv['GENERATE_DOXYGEN_HTML'].upper()
subst_dict['%GENERATE_LATEX%'] = docenv['GENERATE_DOXYGEN_PDF'].upper()
subst_dict['%GENERATE_XML%']   = docenv['GENERATE_DOXYGEN_XML'].upper()
subst_dict['%GENERATE_RTF%']   = docenv['GENERATE_DOXYGEN_RTF'].upper()

doxy_file    = os.path.join(doc_dir, 'doxygen.conf')
doxy_file_in = os.path.join(top_dir,'doxygen.conf.in')

#------------------------------------------------------------------------------
# Substitute the symbol values
#------------------------------------------------------------------------------
if "doc" in COMMAND_LINE_TARGETS:
    docenv.Substfile(doxy_file, doxy_file_in, SUBST_DICT = subst_dict)
    docenv.Alias('doc', doxy_file)

#
# A dummy file called ".generated.txt" will serve a source since we don't know
# the name of all the files Doxygen will generate...
#
docenv['doc_dummy_src'] = os.path.join(doc_dir, '.generated.txt')

#------------------------------------------------------------------------------
# Generate the doc
#------------------------------------------------------------------------------
if "doc" in COMMAND_LINE_TARGETS:
    docenv.MakeDoc(docenv['doc_dummy_src'], doxy_file)
    docenv.Alias('doc', docenv['doc_dummy_src'])

#------------------------------------------------------------------------------
# Cleaning up: Delete the whole doc directory... A bit radical maybe?
#------------------------------------------------------------------------------
docenv.Clean('doc', doc_dir)

#------------------------------------------------------------------------------
#                           Documentation Installation
#------------------------------------------------------------------------------

doc_pdf_dir  = os.path.join(doc_dir, 'latex')
doc_rtf_dir  = os.path.join(doc_dir, 'rtf')
doc_html_dir = os.path.join(doc_dir, 'html')
doc_xml_dir  = os.path.join(doc_dir, 'xml')

install_doc_dir      = docenv['DOCDIR']
install_doc_pdf_dir  = os.path.join(install_doc_dir, 'pdf')
install_doc_rtf_dir  = os.path.join(install_doc_dir, 'rtf')
install_doc_html_dir = os.path.join(install_doc_dir, 'html')
install_doc_xml_dir  = os.path.join(install_doc_dir, 'xml')

prefix_doc_name = "%s-%s" % (docenv['SHORTNAME'], docenv['VERSION'])
prefix_doc_name = prefix_doc_name.lower()

#------------------------------------------------------------------------------
# Install target
#------------------------------------------------------------------------------
if "install-doc" in COMMAND_LINE_TARGETS:
    if docenv['GENERATE_DOXYGEN_PDF'].upper() == 'YES':

        pdf_file = ''
        if os.path.isdir(doc_pdf_dir):
            pdf_file = os.path.join(doc_pdf_dir, 'refman.pdf')
        install_pdf_as = os.path.join(install_doc_pdf_dir,
                                      prefix_doc_name + '.pdf')
        docenv.InstallAs(install_pdf_as, pdf_file)
        docenv.Alias('install-doc', install_doc_pdf_dir)

    if docenv['GENERATE_DOXYGEN_RTF'].upper() == 'YES':
        rtf_file = ''
        if os.path.isdir(doc_rtf_dir):
            rtf_file = os.path.join(doc_rtf_dir, 'refman.rtf')
        install_rtf_as = os.path.join(install_doc_rtf_dir,
                                      prefix_doc_name + '.rtf')
        docenv.InstallAs(install_rtf_as, rtf_file)
        docenv.Alias('install-doc', install_doc_rtf_dir)

    if docenv['GENERATE_DOXYGEN_HTML'].upper() == 'YES':
        html_file = []
        if os.path.isdir(doc_html_dir):
            html_files = os.listdir(os.path.join(doc_dir, 'html'))
            html_files = [os.path.join(doc_html_dir, x) for x in html_files]
        docenv.Install(install_doc_html_dir, html_files)
        docenv.Alias('install-doc', install_doc_html_dir)

    if docenv['GENERATE_DOXYGEN_XML'].upper() == 'YES':
        xml_file = []
        if os.path.isdir(doc_xml_dir):
            xml_files = os.listdir(os.path.join(doc_dir, 'xml'))
            xml_files = [os.path.join(doc_xml_dir, x) for x in xml_files]
        docenv.Install(install_doc_xml_dir, xml_files)
        docenv.Alias('install-doc', install_doc_html_dir)
